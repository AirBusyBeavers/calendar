
State = {
	currentMonth: 
	currentYear:
	days: function(low, end) {
		var list = [];
		for (var i = lowEnd; i <= highEnd; i++) {
    		list.push(i);
    	return list;
    	} 
	}
}


Date Object



1. current date ( when program first starts)
	- day       new Date().getDate()
	- month 	new Date().getMonth() + 1 		(since Jan is a 0 date)
	- year 		new Date().getFullYear()

2. when enter month and year
	=> figure out how many days in that month


	if right arrow press
		if(this.state.currentMonth === 12) {
			this.state.currentMonth === 1;
			this.state.currentYear += 1
		} else {
			this.state.currentMonth += 1;
		}

	var getDaysInMonth = function(month, year) {
		return new Date(year, month, 0).getDate();
	};
	

Placement Alg:

Figure out where 1 day of each month start:

	grid-column: 
		new Date(year, month, day)

		Ex:
			January 1st, 2020

			new Date(2020, 0, 1).getDay();

				return index of day [0 - 6] = [sun - sat]




When click first Date
	
	1. record first date
	2. ever time we hover over button greater than current button
		highlight all previous buttons
	3. 

//--------------------------------------------------------------------------


In App.js

	add startDay and endDay to this.state
		initialize as empty strings ("")

		pass a function from App down to DateGridListItem
		so when a button gets clicked, it invokes the function from 
		App to update the state of App.js


Note to ask TA:
	ask about dateTime in DateGridListItem


Hovering

	0. 
		this.state = {
			startDate : '',
			hoverDate : ''
		}

	1. Click start button
		- setState
			this.state = {
				startDate: ...
			}

	2. Hover

		onMouseEnter={() => this.onHoverListItem(true)}
        onMouseLeave={() => this.onHoverListItem(false)}



		if: the element that is hovered
			- call a function from App
				to setStatee = {
					hoverDate = ...
				}

			let app take care of all other element in range


		else: 


Define your API
	http://localhost:3001/calendar/:homeID
		- where homeID represents a parameter to a specific address

		Call to this API:

			GET request: 
				gets all data of unavailable dates of a specific home
				when given address of that home. 

				response: 
					- 200 + unavailable dates
					- 404

			POST request:
				JSON data:
					{
						id: ...,
						startDate:
						endDate:
					}

				response: 
					- 200
					- 404

Database: 
	SQL


Data Shape (schema):





----------------------------------------------------------------

	Generate "realistic" mock data (for 100 primary records) and load it into your DB


		Get 100 fake address, load it into DB ... (address)






	Build a server that can serve an index.html file which then loads the app and renders it to the page (using react and webpack-dev [development] and webpack [production]).

		webpack-dev [development] and webpack [production] ??


-----------

npm i --save-dev jest


			










	
























